#include <vector>
#include <cmath>

class NeuralNetwork {
private:
    std::vector<std::vector<float>> weights;
    float learning_rate = 0.1f;

public:
    NeuralNetwork(int input_size, int hidden_size) {
        weights.resize(hidden_size, std::vector<float>(input_size));
        // Initialize weights randomly
    }

    float sigmoid(float x) { return 1 / (1 + exp(-x)); }

    float predict(const std::vector<float>& input) {
        float output = 0.0f;
        for (int i = 0; i < input.size(); i++) {
            output += weights[0][i] * input[i];
        }
        return sigmoid(output);
    }

    void train(const std::vector<float>& input, float target) {
        float prediction = predict(input);
        float error = target - prediction;
        
        for (int i = 0; i < input.size(); i++) {
            weights[0][i] += learning_rate * error * input[i];
        }
    }
};

bool is_malicious(const std::vector<float>& features) {
    NeuralNetwork model(10, 5); // 10 inputs, 5 hidden neurons
    return model.predict(features) > 0.7f;
}